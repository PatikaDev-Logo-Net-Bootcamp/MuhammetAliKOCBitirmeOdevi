@using Business.DTO
@{
    ViewData["Title"] = "Kullanıcı İşlemleri";
    Layout = "_Layout";
}
@model List<UserDTO>
<head>
    <link rel="stylesheet" type="text/css" href="~/lib/DataTable/datatables.min.css" />
</head>


<table id="UserListTable" class="table table-hover">
    <thead>
        <tr>
            <th scope="col">Adı</th>
            <th scope="col">Soyadı</th>
            <th scope="col">Kullanıcı Adı</th>
            <th scope="col">EPosta</th>
            <th scope="col">Telefon</th>
            <th scope="col"></th>

        </tr>
    </thead>
    <tbody>

        @foreach (var user in Model)
        {
            <tr>
                <td>@user.FirstName</td>
                <td>@user.LastName</td>
                <td>@user.UserName</td>
                <td>@user.Email</td>
                <td>@user.PhoneNumber</td>
                <td>
                    <button type="button" class="btn btn-primary btnGuncelle" data-userid="@user.Id">Güncelle</button>
                    <button type="button" class="btn btn-danger btnSil" data-userid="@user.Id">Sil</button>
                </td>
            </tr>

        }
    </tbody>
</table>



<!-- Modal -->
<div class="modal fade" id="modalAddorUpdate" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="UserForm">
                        @*asp-controller="User" asp-action="Login" method="post"*@
                        @Html.AntiForgeryToken()
                        @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
                        
                        <input name="Id" id="Id" type="hidden" value="">

                        <div class="form-group">
                            <label>Ad</label>
                            <input name="FirstName" id="FirstName" type="text" class="form-control" placeholder="Kullanıcı Ad">
                            @*@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })*@
                        </div>
                        <div class="form-group">
                            <label>Soyad</label>
                            <input name="LastName" id="LastName" type="text" class="form-control" placeholder="Kullanıcı Soyadı">
                            @*@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })*@
                        </div>
                        <div class="form-group">
                            <label>Kullanıcı Adı</label>
                            <input name="UserName" id="UserName" type="text" class="form-control" placeholder="Kullanıcıadı">
                            @*@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })*@
                        </div>
                        <div class="form-group">
                            <label>EPosta</label>
                            <input name="Email" id="Email" type="text" class="form-control" placeholder="Kullanıcı Eposta">
                            @*@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })*@
                        </div>
                        <div class="form-group">
                            <label>Telefon Numarası</label>
                            <input name="PhoneNumber" id="PhoneNumber" type="text" class="form-control" placeholder="Kullanıcı Telefon">
                            @*@Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })*@
                        </div>

                        @*<div class="form-group">
                            <label>Şifre</label>
                            <input name="Password" id="Password" type="password" class="form-control" placeholder="Kullanıcı Şifresi">
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                            </div>*@


                    </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="btnSubmit">Güncelle</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
<script src="~/lib/DataTable/datatables.min.js"></script>

<script type="text/javascript">
        $(document).ready( function () {

            //Data Table initilation
            $('#UserListTable').DataTable({
                 "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "Tümü"]],
                  //"language": {"url": "/lib/DataTable/Turkish.json"}
                  "language": {"url": "https://cdn.datatables.net/plug-ins/1.10.20/i18n/Turkish.json"}
               });


            $( ".btnGuncelle").on( "click", function() {
                 let userid = $(this).data("userid");
                 console.log('btnGuncelle clicked with data='+userid);
                 getUser(userid);
            });

           $( "#btnSubmit").on( "click", function() {
                 getUser(userid);
            });
        });



                function getUser(userid) {
                        $.ajax({
                                type: 'POST',
                                url: '/User/Get',
                                contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
                                data: { UserId: userid },
                                success: function (result) {

                                    console.log(result);
                                    if(result.isSuccess){
                                        $("#Id").val(result.data.id);
                                        $("#FirstName").val(result.data.firstName);
                                        $("#LastName").val(result.data.lastName);
                                        $("#UserName").val(result.data.userName);
                                        $("#Email").val(result.data.email);
                                        $("#PhoneNumber").val(result.data.phoneNumber);

                                        $('#modalAddorUpdate').modal();
                                    }else{
                                        alert(result.errorMessage);
                                    }                        
                                },
                                error: function () {
                                         alert("Hata! Tekrar deneyiniz. Hata almaya devam ediyorsanız; Lütfen yöneticinizle iletişime geçiniz!");
                                }
                            })
                }



                function updateUser() {
                        var data = $("#UserForm").serialize();
                        $.ajax({
                                type: 'POST',
                                url: '/User/Update',
                                contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
                                data: data,
                                success: function (result) {
                                    console.log('Successfully received Data ');
                                    console.log(result);                            
                                },
                                error: function () {
                                        console.log('Failed to receive the Data');
                                        console.log('Failed ');
                                }
                            })
                }

                function deleteUser(userid) {
                        $.ajax({
                                type: 'POST',
                                url: '/User/Delete',
                                contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
                                data: { UserId: userid },
                                success: function (result) {
                                    console.log('Successfully received Data ');
                                    console.log(result);                            
                                },
                                error: function () {
                                        console.log('Failed to receive the Data');
                                        console.log('Failed ');
                                }
                            })
                }




        function submitStudent() {
    var data = $("#studenteForm").serialize();
    console.log(data);
    alert(data);
    $.ajax({
        type: 'POST',
        url: '/User/CreateStudent',
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
        data: data,
        success: function (result) {
            alert('Successfully received Data ');
            console.log(result);
        },
        error: function () {
            alert('Failed to receive the Data');
            console.log('Failed ');
        }
    })
    }
</script>

}


